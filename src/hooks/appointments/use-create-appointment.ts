// hooks/mutations/use-create-appointment.ts
import { createAppointmentAction } from "@/actions/appointments/create-appointment";
import { AppointmentFormValues } from "@/types/schema/zod-appointments-schema";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";

/**
 * @description Hook customizado para criar um novo agendamento, utilizando React Query.
 * @returns O objeto de muta√ß√£o do React Query.
 */
export function useCreateAppointment() {
  const queryClient = useQueryClient();

  return useMutation({
    // A fun√ß√£o que ser√° executada ao chamar 'mutate'
    mutationFn: (values: AppointmentFormValues) =>
      createAppointmentAction(values),

    // L√≥gica executada ap√≥s o sucesso da Server Action
    onSuccess: (result) => {
      if (result.success) {
        // üí° Invalida a query da lista de agendamentos para for√ßar o refetch dos novos dados
        // Assumindo que a chave de query da sua agenda √© ['appointments']
        queryClient.invalidateQueries({ queryKey: ["appointments"] });
        toast.success("Agendamento criado!", { description: result.message });
      } else {
        toast.error("Falha ao agendar.", { description: result.message });
      }
      return result;
    },

    // L√≥gica executada em caso de erro na rede ou Server Action (se n√£o tratada em onSuccess)
    onError: (error) => {
      console.error("Erro na muta√ß√£o:", error);
      toast.error("Erro de Rede", {
        description: "N√£o foi poss√≠vel se comunicar com o servidor.",
      });
    },
  });
}
