// actions/services/get-services.ts
"use server";

import { authOptions } from "@/lib/auth";
import db from "@/lib/prisma";
import { getServerSession } from "next-auth";

/**
 * @description Server Action para buscar todos os servi칞os de um neg칩cio.
 * @returns Uma lista de servi칞os.
 */
export async function getServicesAction() {
  // 1. Obter o userId
  const session = await getServerSession(authOptions);
  if (!session || !session.user || !session.user.id) {
    throw new Error("N칚o autorizado: Usu치rio n칚o logado.");
  }
  const userId = session.user.id;

  // 2. Obter o businessId
  const business = await db.business.findUnique({
    where: { ownerId: userId },
    select: { id: true },
  });

  if (!business) {
    throw new Error("Neg칩cio n칚o encontrado para o usu치rio logado.");
  }

  const businessId = business.id;

  // 3. Buscar os servi칞os
  const services = await db.service.findMany({
    where: { businessId },
    // Garante que a dura칞칚o e pre칞o venham como strings (se necess치rio) ou n칰meros
    select: {
      id: true,
      name: true,
      durationInMinutes: true, // Corrigido
      price: true,
      // Adicione outros campos necess치rios aqui
    },
    orderBy: { name: "asc" },
  });

  return services;
}

// 游눠 Defini칞칚o de Tipagem (Interface) para os servi칞os
export interface ServiceListItem {
  id: string;
  name: string;
  durationInMinutes: number;
  price: number;
}
