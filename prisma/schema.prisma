generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ===============================================
// AUTH MODELS (Next-Auth)
// ===============================================

// O 'User' aqui representa o "Profissional" (Dono do negócio)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String? // Para o Credentials Provider
  accounts      Account[]
  sessions      Session[]

  // Relation to the business this user owns
  business  Business?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ===============================================
// APPLICATION CORE MODELS
// ===============================================

// Representa a entidade do negócio (a barbearia, o estúdio, etc.)
model Business {
  id   String @id @default(cuid())
  name String
  slug String @unique // Usado para a URL pública: app.com/[slug]

  // Relação 1-para-1 com o dono (Profissional/User)
  ownerId String @unique
  owner   User   @relation(fields: [ownerId], references: [id])

  // Um negócio oferece vários serviços
  services     Service[]
  // Um negócio tem vários clientes
  customers    Customer[]
  // Um negócio tem vários agendamentos
  bookings     Booking[]
  // Um negócio tem vários produtos em estoque
  products     Product[]
  // Um negócio tem horários de funcionamento
  workingHours WorkingHours[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Representa os serviços oferecidos pelo negócio
model Service {
  id                String @id @default(cuid())
  name              String
  durationInMinutes Int
  price             Int

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Um serviço pode estar em vários agendamentos
  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Representa o "Cliente Final"
model Customer {
  id    String  @id @default(cuid())
  name  String
  email String? // Email de contato
  phone String? // WhatsApp

  // Agendamentos feitos por este cliente
  bookings Booking[]

  // Um cliente pertence a um negócio (para multitenancy)
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, businessId]) // O mesmo email pode ser cliente de negócios diferentes
}

enum StatusBooking {
  CANCELED // CANCELADO
  CONFIRMED // CONFIRMADO
  PENDING // PENDENTE
}

// O agendamento em si
model Booking {
  // Detalhes do agendamento
  id         String        @id @default(cuid())
  startTime  DateTime
  endTime    DateTime
  status     StatusBooking @default(PENDING) // Ex: CONFIRMED, CANCELED, PENDENTE
  notes      String?
  // Relacionamentos  
  businessId String
  business   Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  // O cliente que fez o agendamento
  customerId String
  customer   Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  // O serviço agendado
  serviceId  String
  service    Service       @relation(fields: [serviceId], references: [id])
  // Timestamp
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

// Horários de funcionamento do negócio
model WorkingHours {
  id        String @id @default(cuid())
  // 0 = Domingo, 1 = Segunda, ..., 6 = Sábado
  dayOfWeek Int
  // Formato "HH:mm"
  startTime String
  endTime   String

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, dayOfWeek])
}

// Controle de Estoque Básico
model Product {
  id       String @id @default(cuid())
  name     String
  quantity Int

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
